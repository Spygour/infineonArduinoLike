/**********************************************************************************************************************
 * \file ResistorCalculate.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef ADC_UART_H_
#define ADC_UART_H_

#include "Ifx_Types.h"
#include "IfxVadc_Adc.h"
#include "IfxAsclin_ASC.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define RX_LENGTH           1       /* Size of the expected input                       */
#define TX_LENGTH           6      /* Size of the results message, sent to the user    */
#define PASS_CHARACTER      '1'     /* Correct input to be sent, to get the results     */
#define RESET_CHARACTER     '0'     /* Reset input value                                */


typedef struct
{
    IfxVadc_Adc               vadc;               /* VADC configuration     */
    IfxVadc_Adc_Group         adcGroup;           /* Group configuration    */
    IfxVadc_Adc_ChannelConfig adcChannelConfig;   /* Channel configuration  */
    IfxVadc_Adc_Channel       adcChannel;         /* Channel                */
} ApplicationVadcBackgroundScan;
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
/* Group BackGround Adc functions */
void init_vadc_background(IfxVadc_GroupId vadc_group,IfxVadc_ChannelId channel_id,IfxVadc_ChannelResult result_register);
void run_vadc_background(void);
void send_vadc_single(uint32 adcVal);
/* Serial Interface Usb */
void InitSerialInterface(void);
void UartWriteWord(uint8 *message,Ifx_SizeT length);
void UartWrite(uint8 *data, Ifx_SizeT length);
void UartWriteln(uint8 *message,Ifx_SizeT length);
void receive_data(Ifx_SizeT length);
void UartWriteWithChar(uint8 *message,Ifx_SizeT length,char special_char);
void UartRstRxBuffer(void);
uint8 Get_UsbRxBufferIndex(Ifx_SizeT index);
/* Group Scan Adc functions */
void Adc_InitGroup(IfxVadc_ChannelId * g_vadcChannelIDs, IfxVadc_GroupId adcGroup,uint8 channels_size);
void run_vadc_group(uint32 channels);
void Adc_ReadGroup(uint32* ChannelsRes ,uint8 channels);
void send_vadc_group(uint32 chnIx, uint32 adcVal);
uint32 Adc_ReturnChannelVal(uint8 channel);

#endif /* ADC_UART_H_ */
