/**********************************************************************************************************************
 * \file Mcp2515.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef INFINEONARDUINOLIKE_MCP2515_H_
#define INFINEONARDUINOLIKE_MCP2515_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Spi.h"
#include "pinsReadWrite.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 typedef enum
{
  KBPS_125,
  KBPS_250,
  KBPS_500,
  KBPS_1000
}MCP2515_BAUDRATE;

typedef enum
{
  ALL_MESSAGES_MODE,
  STANDARD_IDS_MODE,
  EXTENDED_IDS_MODE,
  OFF_MASK
}MCP2515_RECEIVE_MODE;

typedef struct
{
    uint32  ExtendedId;
    uint16  StandardId;
    boolean Extended;
    uint8*  ReceiveMsg;
    uint8   SpiFilterReg;
}MCP2515_MESSAGE;

typedef struct
{
    MCP2515_RECEIVE_MODE CanReceiveMode;
    MCP2515_MESSAGE*     CanReceivedMsg;
    uint8                CanReceiveMsgSize;
    uint8                CanReceiveMsgIndex;
}MCP2515_RECEIVE_RES;
/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void Mcp2515_Init(void);
void Mcp2515_ChangeRxMod(MCP2515_RECEIVE_MODE mode);
void Mcp2515_SetBaudrate(MCP2515_BAUDRATE Baudrate);
boolean Mcp2515_SetRegNum(uint8 Num);
void Mcp2515_SetTransmitMsgId(uint16 CanId, boolean extIdentifier, uint32 Identifier);
boolean Mcp2515_Transmit(uint8* CanMsg, uint8 CanMsgSize);
void Mcp2515_SetRxMsg(uint16 StandardId, uint32 ExtendedId, boolean Extended);
boolean Mcp2515_ReadRxMsg(void);

#endif /* INFINEONARDUINOLIKE_MCP2515_H_ */
