/**********************************************************************************************************************
 * \file SPI_NRF24.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#ifndef SPI_NRF24_H_
#define SPI_NRF24_H_

#include "RH_ASK.h"
#include "Ifx_Types.h"
#include "IfxQspi_SpiMaster.h"
#include "pinsReadWrite.h"

#include "Bsp.h"

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

typedef enum
 {
    DataRate1Mbps = 0,   ///< 1 Mbps
    DataRate2Mbps,       ///< 2 Mbps
    DataRate250kbps      ///< 250 kbps
 } DataRate;

 typedef enum
 {
 // Add 20dBm for nRF24L01p with PA and LNA modules
 TransmitPowerm18dBm = 0,        ///< On nRF24, -18 dBm
 TransmitPowerm12dBm,            ///< On nRF24, -12 dBm
 TransmitPowerm6dBm,             ///< On nRF24, -6 dBm
 TransmitPower0dBm,              ///< On nRF24, 0 dBm
 // Sigh, different power levels for the same bit patterns on RFM73:
 // On RFM73P-S, there is a Tx power amp, so expect higher power levels, up to 20dBm. Alas
 // there is no clear documentation on the power for different settings :-(
 RFM73TransmitPowerm10dBm = 0,   ///< On RFM73, -10 dBm
 RFM73TransmitPowerm5dBm,        ///< On RFM73, -5 dBm
 RFM73TransmitPowerm0dBm,        ///< On RFM73, 0 dBm
 RFM73TransmitPower5dBm          ///< On RFM73, 5 dBm. 20dBm on RFM73P-S2 ?

 } TransmitPower;

 typedef struct
 {
     Ifx_P*       cePort;
     uint8         cePinIndex;
 } NRF24;


/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 
/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

void masterTxISR(void);
void masterRxISR(void);
void masterErISR(void);
void initQSPI1Master(void);
void initQSPI1MasterChannel(void);
void initQSPI1MasterBuffers(void);
void initQSPI(void);
void Spi_write_register(uint8 register_val);
uint8 Spi_write_command(uint8 command);
void Spi_read_register(uint8 register_val,uint8 count);
uint8 Spi_read(uint8 register_val);
void Spi_BurstRead(uint8 reg, uint8* dest, uint8 len);
void Spi_BurstWrite(uint8 reg,uint8* address,uint8 count);
boolean NRF24_init(Ifx_P* cePort ,uint8 cePin);
uint8 NRF24_spiReadRegister(uint8 reg);
void Spi_write_register_value(uint8 register_val,uint8 value);
void NRF24_spiWriteRegister(uint8 reg,uint8 val);
void NRF24_spiBurstWriteRegister(uint8 reg,uint8* address,uint8 count);
void NRF24_spiBurstReadRegister(uint8 reg,uint8 *dest,uint8 len);
boolean RHGeneric_init(void);
boolean NRF24_waitCAD(void);
uint8  NRF24_statusRead(void);
boolean NRF24_setChannel(uint8 channel);
boolean NRF24_setOpMode(uint8 mode);
boolean NRF24_setNetworkAddress(uint8* address, uint8 len);
boolean NRF24_setRF(DataRate data_rate, TransmitPower power);
void NRF24_setModeIdle(Ifx_P* cePort,uint8 cePinIndex);
void NRF24_setModeRx(Ifx_P* cePort,uint8 cePinIndex);
void NRF24_setModeTx(Ifx_P* cePort,uint8 cePinIndex);
boolean NRF24_sleep(Ifx_P* cePort,uint8 cePinIndex);
boolean NRF24_send(const uint8* data, uint8 len);
boolean NRF24_waitPacketSent(void);
boolean NRF24_isSending(void);
boolean NRF24_available(void);
boolean NRF24_recv(uint8* buf, uint8* len);
uint8 NRF24_maxMessageLength(void);
void NRF24_flushTx(void);
void NRF24_flushRx(void);
void NRF24_validateRxBuf(void);
void NRF24_clearRxBuf(void);

extern boolean NRF24_rxBufValid;
extern uint8 NRF24_bufLen;
extern uint8 NRF24_buf[];
#endif /* SPI_NRF24_H_ */
